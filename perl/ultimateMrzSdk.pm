# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package ultimateMrzSdk;
use base qw(Exporter);
use base qw(DynaLoader);
package ultimateMrzSdkc;
bootstrap ultimateMrzSdk;
package ultimateMrzSdk;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package ultimateMrzSdk;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package ultimateMrzSdk;


############# Class : ultimateMrzSdk::UltMrzSdkResult ##############

package ultimateMrzSdk::UltMrzSdkResult;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( ultimateMrzSdk );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = ultimateMrzSdkc::new_UltMrzSdkResult(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        ultimateMrzSdkc::delete_UltMrzSdkResult($self);
        delete $OWNER{$self};
    }
}

*code = *ultimateMrzSdkc::UltMrzSdkResult_code;
*phrase = *ultimateMrzSdkc::UltMrzSdkResult_phrase;
*json = *ultimateMrzSdkc::UltMrzSdkResult_json;
*numZones = *ultimateMrzSdkc::UltMrzSdkResult_numZones;
*isOK = *ultimateMrzSdkc::UltMrzSdkResult_isOK;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : ultimateMrzSdk::UltMrzSdkEngine ##############

package ultimateMrzSdk::UltMrzSdkEngine;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( ultimateMrzSdk );
%OWNER = ();
%ITERATORS = ();
*init = *ultimateMrzSdkc::UltMrzSdkEngine_init;
*deInit = *ultimateMrzSdkc::UltMrzSdkEngine_deInit;
*process = *ultimateMrzSdkc::UltMrzSdkEngine_process;
*requestRuntimeLicenseKey = *ultimateMrzSdkc::UltMrzSdkEngine_requestRuntimeLicenseKey;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        ultimateMrzSdkc::delete_UltMrzSdkEngine($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package ultimateMrzSdk;

*ULTMRZ_SDK_VERSION_MAJOR = *ultimateMrzSdkc::ULTMRZ_SDK_VERSION_MAJOR;
*ULTMRZ_SDK_VERSION_MINOR = *ultimateMrzSdkc::ULTMRZ_SDK_VERSION_MINOR;
*ULTMRZ_SDK_VERSION_MICRO = *ultimateMrzSdkc::ULTMRZ_SDK_VERSION_MICRO;
*ULTMRZ_SDK_IMAGE_TYPE_RGB24 = *ultimateMrzSdkc::ULTMRZ_SDK_IMAGE_TYPE_RGB24;
*ULTMRZ_SDK_IMAGE_TYPE_RGBA32 = *ultimateMrzSdkc::ULTMRZ_SDK_IMAGE_TYPE_RGBA32;
*ULTMRZ_SDK_IMAGE_TYPE_BGRA32 = *ultimateMrzSdkc::ULTMRZ_SDK_IMAGE_TYPE_BGRA32;
*ULTMRZ_SDK_IMAGE_TYPE_NV12 = *ultimateMrzSdkc::ULTMRZ_SDK_IMAGE_TYPE_NV12;
*ULTMRZ_SDK_IMAGE_TYPE_NV21 = *ultimateMrzSdkc::ULTMRZ_SDK_IMAGE_TYPE_NV21;
*ULTMRZ_SDK_IMAGE_TYPE_YUV420P = *ultimateMrzSdkc::ULTMRZ_SDK_IMAGE_TYPE_YUV420P;
*ULTMRZ_SDK_IMAGE_TYPE_YVU420P = *ultimateMrzSdkc::ULTMRZ_SDK_IMAGE_TYPE_YVU420P;
*ULTMRZ_SDK_IMAGE_TYPE_YUV422P = *ultimateMrzSdkc::ULTMRZ_SDK_IMAGE_TYPE_YUV422P;
*ULTMRZ_SDK_IMAGE_TYPE_YUV444P = *ultimateMrzSdkc::ULTMRZ_SDK_IMAGE_TYPE_YUV444P;
*ULTMRZ_SDK_IMAGE_TYPE_Y = *ultimateMrzSdkc::ULTMRZ_SDK_IMAGE_TYPE_Y;
1;
